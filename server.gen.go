//go:build go1.22

// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
)

// Error defines model for Error.
type Error struct {
	// Message Error message
	Message string `json:"message"`
}

// HealthCheckResult defines model for HealthCheckResult.
type HealthCheckResult struct {
	// DurationSeconds Duration of the health check in seconds
	DurationSeconds float32 `json:"duration_seconds"`

	// Error Error message if the health check failed
	Error *string `json:"error,omitempty"`

	// Healthy Whether the target is considered healthy
	Healthy bool `json:"healthy"`

	// Id Target identifier
	Id string `json:"id"`

	// Status HTTP status code from the health check
	Status int `json:"status"`

	// Timestamp When the health check was performed
	Timestamp time.Time `json:"timestamp"`

	// Url The monitored URL
	Url string `json:"url"`
}

// Target defines model for Target.
type Target struct {
	// Id Unique identifier for the target
	Id string `json:"id"`

	// Url The URL to be monitored
	Url string `json:"url"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// NotAllowed defines model for NotAllowed.
type NotAllowed = Error

// RegisterTargetJSONRequestBody defines body for RegisterTarget for application/json ContentType.
type RegisterTargetJSONRequestBody = Target

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the health status of the API
	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// Register a new URL for health checking
	// (POST /register)
	RegisterTarget(w http.ResponseWriter, r *http.Request)
	// Get health check status for all registered targets
	// (GET /status)
	GetStatus(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RegisterTarget operation middleware
func (siw *ServerInterfaceWrapper) RegisterTarget(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterTarget(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/health", wrapper.GetHealth)
	m.HandleFunc("POST "+options.BaseURL+"/register", wrapper.RegisterTarget)
	m.HandleFunc("GET "+options.BaseURL+"/status", wrapper.GetStatus)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWTW/cNhD9KwTbo2pt2gYIdHPaojHgFsbGRg9BUNDiaMWU4iickY1FoP9e8ENabaXW",
	"TpHcuKvhm5n3Hof8JGvsenTgmGT1SXqgHh1B/PFa6T18HIA4/KrRMbi4VH1vTa3YoCs/ELrwH9UtdCqs",
	"vvXQyEp+U56gy/SVyl+8Ry/HcSykBqq96QOIrEIu4XOysZBXjsE7Zd+CfwCfdn31GqakgmJWASmwkL8j",
	"X1qLj6C/fhG/AbeohUMWKucMQXlfgJ3Z6D324NkktTogUgcIy3PEGC+mz4XkYw+yksTeuEMED8QbH7p7",
	"N8O8nwPx/gPUUZU3oCy3P7VQ/7UHGiyvq9CDj3T8SVCj07Qu5+ccIbAR3IJoI6ioA6owTkwbC9mg7xTL",
	"SjYWFZ8qd0N3D1EYmKj4j46F2cjTKGNBr8koZAo7rkH/aIFb8BGLlT8AC0OiRkdGgwctpp0z6D2iBeUC",
	"qtFrwNsMosGxaQz4rXKIFQ8bLL65vb0R6aOoUYNoPHarPk+IxjEcEmlsOiBWXb/Zo1uT9ahI9OCDHJGz",
	"WRetGL4LcFuVD95u9NyC6NAZxsDY3f56CTd486Q9TSggQM/UnCRbtlasnbjl6KTB2sZbet0583GAhV6i",
	"waUdPouEu/21YBT3Czo+l4rEgtEbjYVQ4xpc5768uYplezgYYgjAQjk9VRF+htKW+lMklm1IkCaAiCMA",
	"vLi8uZKFfABPCf3Fxe7iRegbe3CqN7KSP1zsLnaykL3iNlJbJuywzNQH4qNUV1pW8lfglEUW59fR97vd",
	"dj+G5rM3FvJlCtsavjNcuXW/xDE7dJ3yx1TG8iTko5ZnVug7hJcTjdFBSBvt7HPE7eSRfMu9Rn38YrdJ",
	"Bh/PLcJ+gPE5JOZJRENdA1EzWHucDRLun0L++BxSF++FuOXl01sWN+uXk26iXCjh4DH6OVh+6enpPJWn",
	"+fpvZnw7jZktHp+tnmHo6CkZ1/frOB9t5b06bj0Yrg1x8OXZyPZxO/0vHVbH4Aw5H4RAqLJ2YZM8BSnV",
	"mJ5QJKt3/zTbNdbKCg0PYLHvwHF+buW5XsmWua/K0oa4FomrV7tXOzm+H/8OAAD//26WJT6tCgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
