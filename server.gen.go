//go:build go1.22

// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
)

// Error defines model for Error.
type Error struct {
	// Message Error message
	Message string `json:"message"`
}

// HealthCheckResult defines model for HealthCheckResult.
type HealthCheckResult struct {
	// DurationSeconds Duration of the health check in seconds
	DurationSeconds float32 `json:"duration_seconds"`

	// Error Error message if the health check failed
	Error *string `json:"error,omitempty"`

	// Healthy Whether the target is considered healthy
	Healthy bool `json:"healthy"`

	// Id Target identifier
	Id string `json:"id"`

	// Status HTTP status code from the health check
	Status int `json:"status"`

	// Timestamp When the health check was performed
	Timestamp time.Time `json:"timestamp"`

	// Url The monitored URL
	Url string `json:"url"`
}

// Target defines model for Target.
type Target struct {
	// Id Unique identifier for the target
	Id string `json:"id"`

	// Url The URL to be monitored
	Url string `json:"url"`
}

// RegisterTargetJSONRequestBody defines body for RegisterTarget for application/json ContentType.
type RegisterTargetJSONRequestBody = Target

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Register a new URL for health checking
	// (POST /register)
	RegisterTarget(w http.ResponseWriter, r *http.Request)
	// Get health check status for all registered targets
	// (GET /status)
	GetStatus(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// RegisterTarget operation middleware
func (siw *ServerInterfaceWrapper) RegisterTarget(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterTarget(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/register", wrapper.RegisterTarget)
	m.HandleFunc("GET "+options.BaseURL+"/status", wrapper.GetStatus)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RVTW/bOBD9KwR3j9rI+xEg0C27WyQGXCBwHfQQBAUtjiymFKnMjBwYgf97QUqy5Upt",
	"GqAfN1oevnnz5s3wWea+qr0DxySzZ0l5CZWKxzeIHsOhRl8DsoH4uQIitYFw1EA5mpqNdzJr40X/dyJ5",
	"V4PMJDEat5H7fSIRHhuDoGV2d4C5PwT69QPkLPeJvAZlufyvhPzjEqixPGahG1Qh7weC3DtNYzr/dxHC",
	"F4JLEGUEFXlAFcaJ/mIiC4+VYpnJwnrFR+auqdaAgRD0UnylYmEm8hTKWNBjMRLZhu3GoO9L4BIwYrHC",
	"DbAwJHLvyGhA0KK/eQBde29BuYBq9Bhw1YFocGwKAzhFh1hxM6Hi9Wp1I9o/Re41iAJ9NarziGgcw6YV",
	"jU0FxKqqJ2t0Y7GeFIkaMLQjanboi1YMfwS4KeYN2omaSxCVd4Z9UOx2uRjCNWhetKcJBAL0QZpjy4al",
	"JWMnTjm67cHYxlP9unXmsYFBv0Thh3Z4lQi3y4VgL9YDOV4rRauC0ROFhVDjCj/OfXkzj7QRNoYYArBQ",
	"Tvcsws9Abdh/isKyDQnaDSDiCgAUlzdzmcgtILXof57Nzmahbl+DU7WRmfw7fkpkrbiM0qZ96qi6p6h+",
	"0D52a65lJpddxKrXNZQNxP96HQcz947BxYuqrq3J49X0gQKJfleG0+8Ihczkb+lxmabdJk078P2prIwN",
	"xA9Ue0etGf6azb44vdTkORAVjbW7g6iggwb/tNe+C9l250eupzTmbqus0f1G0opVm/v8x+d+C1x6LZxn",
	"oaz1T23Z5z+nbAZ0ygoC3AIK6AITSU1VKdwNXCSUcPAUbR2cP7R2P1bpcc126+DUkFfA7/ptM2WNby7W",
	"MFT0UtXjZ3Z/mHCFqHZTiiwMcXhSTzY3xuv0Sx1x0pMr4FOG3RMWGqOsHUxQ52hq07RtJpndfT6HC58r",
	"KzRswfq6AsedJbpnIpMlc52lqQ1xpSfOLmYXM7m/338KAAD//5Zq7idjCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
